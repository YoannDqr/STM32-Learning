/*----------------------------------------------------------------------------
 * Name:    spi_AT25_Sim.ini
 * Purpose: Simulate AT25 SPI EEPROM connected via SPI1
 * Version: V1.00
 * Note(s):
 *----------------------------------------------------------------------------
 * This file is part of the uVision/ARM development tools.
 * This software may only be used under the terms of a valid, current,
 * end user licence from KEIL for a compatible version of KEIL software
 * development tools. Nothing else gives you the right to use this software.
 *
 * This software is supplied "AS IS" without warranties of any kind.
 *
 * Copyright (c) 2009 Keil - An ARM Company. All rights reserved.
 *----------------------------------------------------------------------------
 * History:
 *          V1.00 Initial Version
 *----------------------------------------------------------------------------*/

/*
 * Simulate AT25 SPI EEPROM connected via SPI
 *  AT25128: SPI EEPROM 128k (16k * 8)
 *   Pins:
 *     AT25xxx      MCU
 *       SCK   -    SCK  (SPI1)
 *       SO    -    MISO (SPI1)
 *       SI    -    MOSI (SPII)
 *       CS    -    PB.08
 */

define unsigned char AT25_State;
define unsigned long AT25_Address;
define unsigned char AT25_Status;

AT25_State   = 0;
AT25_Address = 0;
AT25_Status  = 0;

MAP 0x10000000, 0x10003FFF READ WRITE   // EEPROM


func void AT25 (void) {

  switch (AT25_State) {
    case 0:  // Instruction
      switch (SPI1_OUT & 0xFF) {
        case 0x06:  // WREN
          if (AT25_Status & 0x01) break;
          AT25_Status |=  0x02;  // Set Write Enable Bit
          break;
        case 0x04:  // WRDI
          if (AT25_Status & 0x01) break;
          AT25_Status &= ~0x02;  // Clear Write Enable Bit
          break;    
        case 0x05:  // RDSR
          SPI1_IN = AT25_Status;
          AT25_State = 1;
          break;
        case 0x01:  // WRSR
          if (AT25_Status & 0x01) break;
          AT25_State = 2;
          break;
        case 0x03:  // READ
          if (AT25_Status & 0x01) break;
          AT25_State = 3;
          break;
        case 0x02:  // WRITE
          if (AT25_Status & 0x01) break;
          AT25_State = 4;
          break;
      }
      break;
    case 1:  // Read SR
      SPI1_IN = AT25_Status;
      AT25_State = 0;
      break;
    case 2:  // Write SR
      AT25_Status = (SPI1_OUT & 0x8C) | (AT25_Status & ~0x8C);
      AT25_State = 0;
      break;
    case 3:  // Get MSB Address for Read
      AT25_Address = (SPI1_OUT & 0x3F) << 8; 
      AT25_State = 5;
      break;
    case 4:  // Get MSB Address for Write
      AT25_Address = (SPI1_OUT & 0x3F) << 8; 
      AT25_State = 6;
      break;
    case 5:  // Get LSB Address for Read
      AT25_Address |= SPI1_OUT & 0xFF; 
      AT25_State = 7;
      SPI1_IN = _RBYTE(0x10000000 | AT25_Address);
      break;
    case 6:  // Get LSB Address for Write
      AT25_Address |= SPI1_OUT & 0xFF; 
      AT25_State = 8;
      break;
    case 7:  // Read
      AT25_Address = (AT25_Address + 1) & 0x3FFF;
      SPI1_IN = _RBYTE(0x10000000 | AT25_Address);
      break;
    case 8:  // Write
      if (AT25_Status & 0x02) {
        _WBYTE(0x10000000 | AT25_Address, SPI1_OUT);
        AT25_Address = (AT25_Address & ~0x3F) | ((AT25_Address + 1) & 0x3F);
      }
      break;
  }
}

// AT25 Chip Select Signal Function
signal void AT25_CS (void) {

  while (1) {
    wwatch (PORTB);
    if (PORTB & 0x00000100) {
      if (AT25_State == 8) {
        AT25_State = 0;
        AT25_Status |=  0x01;  // Set Busy Bit
        swatch (0.001);        // Wait 1ms
        AT25_Status &= ~0x01;  // Set Busy Bit
      } else {
        AT25_State = 0;
      }
    }
  }  
}

// AT25 SPI Signal Function
signal void AT25_SPI (void) {

  while (1) {
    wwatch (SPI1_OUT);
    twatch (1);
    if ((PORTB & 0x00000100) == 0) AT25();
  }
}

// Start AT25 Signal Functions
AT25_CS()
AT25_SPI()
